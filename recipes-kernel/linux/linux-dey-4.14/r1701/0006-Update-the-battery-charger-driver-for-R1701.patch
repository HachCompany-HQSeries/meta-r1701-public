From 500b2cf20379aa15e308c65569981085001c54e2 Mon Sep 17 00:00:00 2001
From: Robert Yang <ryang@hach.com>
Date: Fri, 11 Oct 2019 19:54:50 +0000
Subject: [PATCH 6/6] Update-the-battery-charger-driver-for-R1701

---
 drivers/power/supply/bq25890_charger.c | 159 +++++++++++++++++++++----
 1 file changed, 133 insertions(+), 26 deletions(-)

diff --git a/drivers/power/supply/bq25890_charger.c b/drivers/power/supply/bq25890_charger.c
index 8e2c41ded171..c434ff3dced5 100644
--- a/drivers/power/supply/bq25890_charger.c
+++ b/drivers/power/supply/bq25890_charger.c
@@ -24,7 +24,7 @@
 #include <linux/interrupt.h>
 #include <linux/delay.h>
 #include <linux/usb/phy.h>
-
+#include <linux/usb.h>
 #include <linux/acpi.h>
 #include <linux/of.h>
 
@@ -75,6 +75,9 @@ struct bq25890_init_data {
 	u8 boostf;	/* boost frequency		*/
 	u8 ilim_en;	/* enable ILIM pin		*/
 	u8 treg;	/* thermal regulation threshold */
+	u8 chgtimer;    /* charge timer  */
+	u8 cmpresistor; /* compensation resistor */
+	u8 cmpvoltage;  /* compensation voltage */
 };
 
 struct bq25890_state {
@@ -84,6 +87,8 @@ struct bq25890_state {
 	u8 vsys_status;
 	u8 boost_fault;
 	u8 bat_fault;
+	u8 chrg_type;
+	u8 ntc_fault;
 };
 
 struct bq25890_device {
@@ -181,7 +186,7 @@ static const struct reg_field bq25890_reg_fields[] = {
 	[F_CHG_TMR]		= REG_FIELD(0x07, 1, 2),
 	[F_JEITA_ISET]		= REG_FIELD(0x07, 0, 0),
 	/* REG08 */
-	[F_BATCMP]		= REG_FIELD(0x08, 6, 7),
+	[F_BATCMP]		= REG_FIELD(0x08, 5, 7),
 	[F_VCLAMP]		= REG_FIELD(0x08, 2, 4),
 	[F_TREG]		= REG_FIELD(0x08, 0, 1),
 	/* REG09 */
@@ -250,10 +255,13 @@ enum bq25890_table_ids {
 	TBL_VCLAMP,
 	TBL_BOOSTV,
 	TBL_SYSVMIN,
+	TBL_CMPRESISTOR,
+	TBL_CMPVOLTAGE,
 
 	/* lookup tables */
 	TBL_TREG,
 	TBL_BOOSTI,
+	TBL_CHGTIMER,
 };
 
 /* Thermal Regulation Threshold lookup table, in degrees Celsius */
@@ -268,6 +276,11 @@ static const u32 bq25890_boosti_tbl[] = {
 
 #define BQ25890_BOOSTI_TBL_SIZE		ARRAY_SIZE(bq25890_boosti_tbl)
 
+/* Fast Charge Timer Setting, in hours */
+static const u32 bq25890_chgtimer_tbl[] = { 5, 8, 12, 20 };
+
+#define BQ25890_CHGTIMER_TBL_SIZE		ARRAY_SIZE(bq25890_chgtimer_tbl)
+
 struct bq25890_range {
 	u32 min;
 	u32 max;
@@ -291,10 +304,13 @@ static const union {
 	[TBL_VCLAMP] =	{ .rt = {0,	  224000,  32000} },	 /* uV */
 	[TBL_BOOSTV] =	{ .rt = {4550000, 5510000, 64000} },	 /* uV */
 	[TBL_SYSVMIN] = { .rt = {3000000, 3700000, 100000} },	 /* uV */
+	[TBL_CMPRESISTOR] = { .rt = {0, 140000, 20000} },	 /* uOhm */
+	[TBL_CMPVOLTAGE] = { .rt = {0, 224000, 32000} },	 /* uV */
 
 	/* lookup tables */
 	[TBL_TREG] =	{ .lt = {bq25890_treg_tbl, BQ25890_TREG_TBL_SIZE} },
-	[TBL_BOOSTI] =	{ .lt = {bq25890_boosti_tbl, BQ25890_BOOSTI_TBL_SIZE} }
+	[TBL_BOOSTI] =	{ .lt = {bq25890_boosti_tbl, BQ25890_BOOSTI_TBL_SIZE} },
+	[TBL_CHGTIMER] =	{ .lt = {bq25890_chgtimer_tbl, BQ25890_CHGTIMER_TBL_SIZE} }
 };
 
 static int bq25890_field_read(struct bq25890_device *bq,
@@ -368,7 +384,22 @@ enum bq25890_chrg_fault {
 	CHRG_FAULT_THERMAL_SHUTDOWN,
 	CHRG_FAULT_TIMER_EXPIRED,
 };
-
+enum bq25890_chrg_type {
+	CHRG_NO_INPUT,
+	CHRG_USB_HOST_SDP,
+	CHRG_USB_CDP,
+	CHRG_USB_DCP,
+	CHRG_HIGH_VOL_DCP,
+	CHRG_UNKNOWN_ADAPTER,
+	CHRG_NON_STANDARD_ADAPTER,
+	CHRG_OTG,
+};
+enum bq25890_ntc_fault {
+	TS_WARM = 0x02,
+	TS_COOL = 0x03,
+	TS_COLD = 0x05,
+	TS_HOT,
+};
 static int bq25890_power_supply_get_property(struct power_supply *psy,
 					     enum power_supply_property psp,
 					     union power_supply_propval *val)
@@ -383,14 +414,18 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 
 	switch (psp) {
 	case POWER_SUPPLY_PROP_STATUS:
+		ret = bq25890_field_read(bq, F_CHG_STAT); /* read charger status value again */
+		if (ret < 0)
+			return ret;
+
 		if (!state.online)
 			val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
-		else if (state.chrg_status == STATUS_NOT_CHARGING)
+		else if (ret == STATUS_NOT_CHARGING)
 			val->intval = POWER_SUPPLY_STATUS_NOT_CHARGING;
-		else if (state.chrg_status == STATUS_PRE_CHARGING ||
-			 state.chrg_status == STATUS_FAST_CHARGING)
+		else if (ret == STATUS_PRE_CHARGING ||
+			 ret == STATUS_FAST_CHARGING)
 			val->intval = POWER_SUPPLY_STATUS_CHARGING;
-		else if (state.chrg_status == STATUS_TERMINATION_DONE)
+		else if (ret == STATUS_TERMINATION_DONE)
 			val->intval = POWER_SUPPLY_STATUS_FULL;
 		else
 			val->intval = POWER_SUPPLY_STATUS_UNKNOWN;
@@ -406,14 +441,16 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 		break;
 
 	case POWER_SUPPLY_PROP_HEALTH:
-		if (!state.chrg_fault && !state.bat_fault && !state.boost_fault)
+		if (!state.chrg_fault && !state.bat_fault && !state.boost_fault && !state.ntc_fault)
 			val->intval = POWER_SUPPLY_HEALTH_GOOD;
 		else if (state.bat_fault)
 			val->intval = POWER_SUPPLY_HEALTH_OVERVOLTAGE;
 		else if (state.chrg_fault == CHRG_FAULT_TIMER_EXPIRED)
 			val->intval = POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE;
-		else if (state.chrg_fault == CHRG_FAULT_THERMAL_SHUTDOWN)
+		else if (state.chrg_fault == CHRG_FAULT_THERMAL_SHUTDOWN || state.ntc_fault == TS_HOT || state.ntc_fault == TS_WARM)
 			val->intval = POWER_SUPPLY_HEALTH_OVERHEAT;
+		else if (state.ntc_fault == TS_COLD || state.ntc_fault == TS_COOL)
+			val->intval = POWER_SUPPLY_HEALTH_COLD;
 		else
 			val->intval = POWER_SUPPLY_HEALTH_UNSPEC_FAILURE;
 		break;
@@ -452,7 +489,34 @@ static int bq25890_power_supply_get_property(struct power_supply *psy,
 	case POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT:
 		val->intval = bq25890_find_val(bq->init_data.iterm, TBL_ITERM);
 		break;
+	case POWER_SUPPLY_PROP_SCOPE:
+		if (state.chrg_type == CHRG_USB_HOST_SDP) {
+			val->intval = POWER_SUPPLY_SCOPE_SYSTEM;
+		}
+		else if (state.chrg_type == CHRG_OTG) {
+			val->intval = POWER_SUPPLY_SCOPE_UNKNOWN;
+		}
+		else {
+			val->intval = POWER_SUPPLY_SCOPE_DEVICE;
+		}
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
+
+		ret = bq25890_field_read(bq, F_BATV); /* read measured value */
+		if (ret < 0)
+			return ret;
+
+		/* converted_val = 2.304V + ADC_val * 20mV (table 10.3.15) */
+		val->intval = 2304000 + ret * 20000;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		ret = bq25890_field_read(bq, F_SYSV); /* read measured value */
+		if (ret < 0)
+			return ret;
 
+		/* converted_val = 2.304V + ADC_val * 20mV (table 10.3.15) */
+		val->intval = 2304000 + ret * 20000;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -474,7 +538,9 @@ static int bq25890_get_chip_state(struct bq25890_device *bq,
 		{F_VSYS_STAT,	&state->vsys_status},
 		{F_BOOST_FAULT, &state->boost_fault},
 		{F_BAT_FAULT,	&state->bat_fault},
-		{F_CHG_FAULT,	&state->chrg_fault}
+		{F_CHG_FAULT,	&state->chrg_fault},
+		{F_VBUS_STAT,   &state->chrg_type},
+		{F_NTC_FAULT,   &state->ntc_fault},
 	};
 
 	for (i = 0; i < ARRAY_SIZE(state_fields); i++) {
@@ -484,10 +550,12 @@ static int bq25890_get_chip_state(struct bq25890_device *bq,
 
 		*state_fields[i].data = ret;
 	}
-
-	dev_dbg(bq->dev, "S:CHG/PG/VSYS=%d/%d/%d, F:CHG/BOOST/BAT=%d/%d/%d\n",
+	if (state->chrg_type == CHRG_OTG) {
+		state->online = 1;
+	}
+	dev_dbg(bq->dev, "S:CHG/PG/VSYS=%d/%d/%d, F:CHG/BOOST/BAT=%d/%d/%d/%d\n",
 		state->chrg_status, state->online, state->vsys_status,
-		state->chrg_fault, state->boost_fault, state->bat_fault);
+		state->chrg_fault, state->boost_fault, state->bat_fault,state->ntc_fault);
 
 	return 0;
 }
@@ -506,7 +574,8 @@ static bool bq25890_state_changed(struct bq25890_device *bq,
 		old_state.online != new_state->online		||
 		old_state.bat_fault != new_state->bat_fault	||
 		old_state.boost_fault != new_state->boost_fault ||
-		old_state.vsys_status != new_state->vsys_status);
+		old_state.vsys_status != new_state->vsys_status ||
+		old_state.ntc_fault != new_state->ntc_fault );
 }
 
 static void bq25890_handle_state_change(struct bq25890_device *bq,
@@ -604,7 +673,11 @@ static int bq25890_hw_init(struct bq25890_device *bq)
 		{F_BOOSTI,	 bq->init_data.boosti},
 		{F_BOOSTF,	 bq->init_data.boostf},
 		{F_EN_ILIM,	 bq->init_data.ilim_en},
-		{F_TREG,	 bq->init_data.treg}
+		{F_TREG,	 bq->init_data.treg},
+		{F_CHG_TMR,  bq->init_data.chgtimer},
+		{F_BATCMP,   bq->init_data.cmpresistor},
+		{F_VCLAMP,   bq->init_data.cmpvoltage},
+		
 	};
 
 	ret = bq25890_chip_reset(bq);
@@ -613,6 +686,14 @@ static int bq25890_hw_init(struct bq25890_device *bq)
 
 	/* disable watchdog */
 	ret = bq25890_field_write(bq, F_WD, 0);
+	if (ret < 0)
+		return ret;
+	/* disable boost mode thermal protection */
+	ret = bq25890_field_write(bq, F_BHOT, 0x03);
+	if (ret < 0)
+		return ret;
+	/* set battery low voltage to 2.8V */
+	ret = bq25890_field_write(bq, F_BATLOWV, 0x00);
 	if (ret < 0)
 		return ret;
 
@@ -650,6 +731,9 @@ static enum power_supply_property bq25890_power_supply_props[] = {
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE,
 	POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT,
+	POWER_SUPPLY_PROP_SCOPE,
+    POWER_SUPPLY_PROP_VOLTAGE_AVG,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
 };
 
 static char *bq25890_charger_supplied_to[] = {
@@ -684,19 +768,32 @@ static void bq25890_usb_work(struct work_struct *data)
 			container_of(data, struct bq25890_device, usb_work);
 
 	switch (bq->usb_event) {
-	case USB_EVENT_ID:
+	case USB_BUS_ADD://USB_EVENT_ID:
 		/* Enable boost mode */
 		ret = bq25890_field_write(bq, F_OTG_CFG, 1);
+
 		if (ret < 0)
 			goto error;
+
+		mutex_lock(&bq->lock);
+		bq->state.online = 1;
+		bq->state.chrg_type = CHRG_OTG;
+		mutex_unlock(&bq->lock);
+
 		break;
 
-	case USB_EVENT_NONE:
+	case USB_BUS_REMOVE://USB_EVENT_NONE:
 		/* Disable boost mode */
 		ret = bq25890_field_write(bq, F_OTG_CFG, 0);
+
 		if (ret < 0)
 			goto error;
 
+		mutex_lock(&bq->lock);
+		bq->state.online = 0;
+		bq->state.chrg_type = CHRG_NO_INPUT;
+		mutex_unlock(&bq->lock);
+
 		power_supply_changed(bq->charger);
 		break;
 	}
@@ -713,9 +810,10 @@ static int bq25890_usb_notifier(struct notifier_block *nb, unsigned long val,
 	struct bq25890_device *bq =
 			container_of(nb, struct bq25890_device, usb_nb);
 
-	bq->usb_event = val;
-	queue_work(system_power_efficient_wq, &bq->usb_work);
-
+	if (val == USB_BUS_ADD || val == USB_BUS_REMOVE) {
+		bq->usb_event = val;
+		queue_work(system_power_efficient_wq, &bq->usb_work);
+	}
 	return NOTIFY_OK;
 }
 
@@ -752,6 +850,9 @@ static int bq25890_fw_read_u32_props(struct bq25890_device *bq)
 		{"ti,minimum-sys-voltage", false, TBL_SYSVMIN, &init->sysvmin},
 		{"ti,boost-voltage", false, TBL_BOOSTV, &init->boostv},
 		{"ti,boost-max-current", false, TBL_BOOSTI, &init->boosti},
+		{"ti,charge-timer", false, TBL_CHGTIMER, &init->chgtimer},
+		{"ti,compensation-resistor", false, TBL_CMPRESISTOR, &init->cmpresistor},
+		{"ti,compensation-voltage", false, TBL_CMPVOLTAGE, &init->cmpvoltage},
 
 		/* optional properties */
 		{"ti,thermal-regulation-threshold", true, TBL_TREG, &init->treg}
@@ -870,11 +971,16 @@ static int bq25890_probe(struct i2c_client *client,
 	}
 
 	/* OTG reporting */
-	bq->usb_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2);
+
+	bq->usb_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2); //devm_usb_get_phy_by_phandle(dev, "fsl,usbphy", 0);
 	if (!IS_ERR_OR_NULL(bq->usb_phy)) {
 		INIT_WORK(&bq->usb_work, bq25890_usb_work);
 		bq->usb_nb.notifier_call = bq25890_usb_notifier;
-		usb_register_notifier(bq->usb_phy, &bq->usb_nb);
+		//usb_register_notifier(bq->usb_phy, &bq->usb_nb);
+		usb_register_notify(&bq->usb_nb);
+	}
+	else {
+		dev_err(dev, "Failed to register usb event\n");
 	}
 
 	ret = devm_request_threaded_irq(dev, client->irq, NULL,
@@ -894,7 +1000,8 @@ static int bq25890_probe(struct i2c_client *client,
 
 irq_fail:
 	if (!IS_ERR_OR_NULL(bq->usb_phy))
-		usb_unregister_notifier(bq->usb_phy, &bq->usb_nb);
+		//usb_unregister_notifier(bq->usb_phy, &bq->usb_nb);
+		usb_unregister_notify(&bq->usb_nb);
 
 	return ret;
 }
@@ -906,8 +1013,8 @@ static int bq25890_remove(struct i2c_client *client)
 	power_supply_unregister(bq->charger);
 
 	if (!IS_ERR_OR_NULL(bq->usb_phy))
-		usb_unregister_notifier(bq->usb_phy, &bq->usb_nb);
-
+		//usb_unregister_notifier(bq->usb_phy, &bq->usb_nb);
+	    usb_unregister_notify(&bq->usb_nb);
 	/* reset all registers to default values */
 	bq25890_chip_reset(bq);
 
-- 
2.17.1

