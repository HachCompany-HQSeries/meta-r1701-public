From f8f72b1e7233942916f6d473cdce53e5ddfe52f9 Mon Sep 17 00:00:00 2001
From: Robert Yang <ryang@hach.com>
Date: Thu, 21 Nov 2019 21:19:43 +0000
Subject: [PATCH 12/12] Configure-PWM-output-to-GPIO-in-disabled-state

---
 drivers/pwm/pwm-imx.c | 81 +++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 79 insertions(+), 2 deletions(-)

diff --git a/drivers/pwm/pwm-imx.c b/drivers/pwm/pwm-imx.c
index e67a6172deea..e7e8a3d6d0ce 100644
--- a/drivers/pwm/pwm-imx.c
+++ b/drivers/pwm/pwm-imx.c
@@ -18,6 +18,7 @@
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/io.h>
+#include <linux/pinctrl/consumer.h>
 #include <linux/pwm.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
@@ -58,10 +59,36 @@ struct imx_chip {
 	void __iomem	*mmio_base;
 
 	struct pwm_chip	chip;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *pinctrl_pins_default;
+	struct pinctrl_state *pinctrl_pins_pwm;
 };
 
 #define to_imx_chip(chip)	container_of(chip, struct imx_chip, chip)
 
+static int imx_pwm_init_pinctrl_info(struct imx_chip *imx_chip,
+		struct platform_device *pdev)
+{
+	imx_chip->pinctrl = devm_pinctrl_get(&pdev->dev);
+	if (!imx_chip->pinctrl || IS_ERR(imx_chip->pinctrl)) {
+		dev_info(&pdev->dev, "can not get pinctrl\n");
+		return PTR_ERR(imx_chip->pinctrl);
+	}
+
+	imx_chip->pinctrl_pins_default = pinctrl_lookup_state(imx_chip->pinctrl,
+			PINCTRL_STATE_DEFAULT);
+	imx_chip->pinctrl_pins_pwm = pinctrl_lookup_state(imx_chip->pinctrl,
+			"pwm");
+
+	if (IS_ERR(imx_chip->pinctrl_pins_default) ||
+	    IS_ERR(imx_chip->pinctrl_pins_pwm)) {
+		dev_info(&pdev->dev, "PWM output mux information incomplete\n");
+		devm_pinctrl_put(imx_chip->pinctrl);
+		imx_chip->pinctrl = NULL;
+	}
+
+	return 0;
+}
 static int imx_pwm_clk_prepare_enable(struct pwm_chip *chip)
 {
 	struct imx_chip *imx = to_imx_chip(chip);
@@ -222,7 +249,7 @@ static int imx_pwm_apply_v2(struct pwm_chip *chip, struct pwm_device *pwm,
 
 		period_cycles /= prescale;
 		c = (unsigned long long)period_cycles * state->duty_cycle;
-		do_div(c, state->period);
+		do_div(c, state->period);		
 		duty_cycles = c;
 
 		/*
@@ -261,9 +288,27 @@ static int imx_pwm_apply_v2(struct pwm_chip *chip, struct pwm_device *pwm,
 			cr |= MX3_PWMCR_POUTC;
 
 		writel(cr, imx->mmio_base + MX3_PWMCR);
+		/*
+		 * If we are in charge of pinctrl then switch output to
+		 * the PWM signal.
+		 */
+		if (imx->pinctrl)
+			pinctrl_select_state(imx->pinctrl,imx->pinctrl_pins_pwm);
+
 	} else if (cstate.enabled) {
-		writel(0, imx->mmio_base + MX3_PWMCR);
+		/*
+		 * PWM block will be disabled. Normally its output will go
+		 * to 0 no matter what polarity is set. In case reversed PWM
+		 * polarity is required reconfigure the output pin to GPIO to
+		 * keep the output at the same level as for duty-cycle = 0.
+		 * First switch the muxing and then disable the PWM. In that
+		 * order we do not get unwanted logic level changes on the
+		 * output.
+		 */
+		if (imx->pinctrl)
+			pinctrl_select_state(imx->pinctrl,imx->pinctrl_pins_default);
 
+		writel(0, imx->mmio_base + MX3_PWMCR);
 		imx_pwm_clk_disable_unprepare(chip);
 	}
 
@@ -349,6 +394,9 @@ static int imx_pwm_probe(struct platform_device *pdev)
 		imx->chip.of_xlate = of_pwm_xlate_with_flags;
 		imx->chip.of_pwm_n_cells = 3;
 	}
+	ret = imx_pwm_init_pinctrl_info(imx, pdev);
+	if (ret)
+		return ret;
 
 	r = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	imx->mmio_base = devm_ioremap_resource(&pdev->dev, r);
@@ -374,15 +422,44 @@ static int imx_pwm_remove(struct platform_device *pdev)
 	return pwmchip_remove(&imx->chip);
 }
 
+#ifdef CONFIG_PM_SLEEP
+static int imx_pwm_suspend(struct device *dev)
+{
+	struct imx_chip *imx;
+	struct platform_device *pdev = to_platform_device(dev);
+	imx = platform_get_drvdata(pdev);
+	pwm_disable(&imx->chip.pwms[0]);
+	return 0;
+}
+
+static int imx_pwm_resume(struct device *dev)
+{
+	struct imx_chip *imx;
+	struct platform_device *pdev = to_platform_device(dev);
+	imx = platform_get_drvdata(pdev);
+	pwm_enable(&imx->chip.pwms[0]);
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(imx_pwm_pm_ops,
+			 imx_pwm_suspend, imx_pwm_resume);
+/*
+static const struct dev_pm_ops imx_pwm_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(imx_pwm_suspend, imx_pwm_resume)
+};
+*/
 static struct platform_driver imx_pwm_driver = {
 	.driver		= {
 		.name	= "imx-pwm",
 		.of_match_table = imx_pwm_dt_ids,
+		.pm = &imx_pwm_pm_ops,
 	},
 	.probe		= imx_pwm_probe,
 	.remove		= imx_pwm_remove,
 };
 
+
 module_platform_driver(imx_pwm_driver);
 
 MODULE_LICENSE("GPL v2");
-- 
2.17.1

